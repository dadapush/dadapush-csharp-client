/* 
 * DaDaPush Public API
 *
 * DaDaPush: Real-time Notifications App Send real-time notifications through our API without coding and maintaining your own app for iOS or Android devices.
 *
 * The version of the OpenAPI document: v1
 * Contact: contacts@dadapush.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using Com.DaDaPush.Client.Api;
using Com.DaDaPush.Client.Client;
using Com.DaDaPush.Client.Model;
using NUnit.Framework;
using Action = Com.DaDaPush.Client.Model.Action;

namespace Com.DaDaPush.Client.Test
{
    /// <summary>
    ///     Class for testing DaDaPushMessageApi
    /// </summary>
    /// <remarks>
    ///     This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    ///     Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DaDaPushMessageApiTests
    {
        private DaDaPushMessageApi instance;

        /// <summary>
        ///     Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            var configuration = new Configuration {BasePath = "http://127.0.0.1:8080"};
            instance = new DaDaPushMessageApi(configuration);
        }

        /// <summary>
        ///     Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        /// <summary>
        ///     Test an instance of DaDaPushMessageApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf(typeof(DaDaPushMessageApi), instance);
        }


        /// <summary>
        ///     Test CreateMessage
        /// </summary>
        [Test]
        public void CreateMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            var action = new Action("view", url: "https://www.dadapush.com/", type: Action.TypeEnum.Link);
            var actions = new List<Action> {action};
            var body = new MessagePushRequest(title: "Good News!",
                content: "Good News! DaDaPush releasing new version",
                needPush: true,
                actions: actions);
            const string channelToken = "ctb3lwO6AeiZOwqZgp8BE8980FdNgp0cp6MCf";
            var response = instance.CreateMessage(body, channelToken);
            Console.WriteLine(response);
            Assert.IsInstanceOf(typeof(ResultOfMessagePushResponse), response,
                "response is ResultOfMessagePushResponse");
        }

        /// <summary>
        ///     Test DeleteMessage
        /// </summary>
        [Test]
        public void DeleteMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? messageId = 227867;
            const string channelToken = "ctb3lwO6AeiZOwqZgp8BE8980FdNgp0cp6MCf";
            var response = instance.DeleteMessage(messageId, channelToken);
            Console.WriteLine(response);
            Assert.IsInstanceOf(typeof(Result), response, "response is Result");
        }

        /// <summary>
        ///     Test GetMessage
        /// </summary>
        [Test]
        public void GetMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            long? messageId = 227867;
            const string channelToken = "ctb3lwO6AeiZOwqZgp8BE8980FdNgp0cp6MCf";
            var response = instance.GetMessage(messageId, channelToken);
            Console.WriteLine(response);
            Assert.IsInstanceOf(typeof(ResultOfMessageObject), response, "response is ResultOfMessageObject");
        }

        /// <summary>
        ///     Test GetMessages
        /// </summary>
        [Test]
        public void GetMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int? page = 1;
            int? pageSize = 10;
            const string channelToken = "ctb3lwO6AeiZOwqZgp8BE8980FdNgp0cp6MCf";
            var response = instance.GetMessages(page, pageSize, channelToken);
            Console.WriteLine(response);
            Assert.IsInstanceOf(typeof(ResultOfPageResponseOfMessageObject), response,
                "response is ResultOfPageResponseOfMessageObject");
        }
    }
}