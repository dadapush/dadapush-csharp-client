/* 
 * DaDaPush Public API
 *
 * DaDaPush: Real-time Notifications App Send real-time notifications through our API without coding and maintaining your own app for iOS or Android devices.
 *
 * The version of the OpenAPI document: v1
 * Contact: contacts@dadapush.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Com.DaDaPush.Client.Client;
using Com.DaDaPush.Client.Api;
using Com.DaDaPush.Client.Model;

namespace Com.DaDaPush.Client.Test
{
    /// <summary>
    ///  Class for testing DaDaPushMessageApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DaDaPushMessageApiTests
    {
        private DaDaPushMessageApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DaDaPushMessageApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DaDaPushMessageApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' DaDaPushMessageApi
            //Assert.IsInstanceOf(typeof(DaDaPushMessageApi), instance);
        }

        
        /// <summary>
        /// Test CreateMessage
        /// </summary>
        [Test]
        public void CreateMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MessagePushRequest body = null;
            //string xChannelToken = null;
            //var response = instance.CreateMessage(body, xChannelToken);
            //Assert.IsInstanceOf(typeof(ResultOfMessagePushResponse), response, "response is ResultOfMessagePushResponse");
        }
        
        /// <summary>
        /// Test DeleteMessage
        /// </summary>
        [Test]
        public void DeleteMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? messageId = null;
            //string xChannelToken = null;
            //var response = instance.DeleteMessage(messageId, xChannelToken);
            //Assert.IsInstanceOf(typeof(Result), response, "response is Result");
        }
        
        /// <summary>
        /// Test GetMessage
        /// </summary>
        [Test]
        public void GetMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? messageId = null;
            //string xChannelToken = null;
            //var response = instance.GetMessage(messageId, xChannelToken);
            //Assert.IsInstanceOf(typeof(ResultOfMessageObject), response, "response is ResultOfMessageObject");
        }
        
        /// <summary>
        /// Test GetMessages
        /// </summary>
        [Test]
        public void GetMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? pageSize = null;
            //string xChannelToken = null;
            //var response = instance.GetMessages(page, pageSize, xChannelToken);
            //Assert.IsInstanceOf(typeof(ResultOfPageResponseOfMessageObject), response, "response is ResultOfPageResponseOfMessageObject");
        }
        
    }

}
