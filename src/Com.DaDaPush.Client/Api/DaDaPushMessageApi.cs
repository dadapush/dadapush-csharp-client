/* 
 * DaDaPush Public API
 *
 * DaDaPush: Real-time Notifications App Send real-time notifications through our API without coding and maintaining your own app for iOS or Android devices.
 *
 * The version of the OpenAPI document: v1
 * Contact: contacts@dadapush.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using Com.DaDaPush.Client.Client;
using Com.DaDaPush.Client.Model;
using RestSharp;

namespace Com.DaDaPush.Client.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDaDaPushMessageApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///     push Message to a Channel
        /// </summary>
        /// <remarks>
        ///     &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;1 request per 1s&lt;/li&gt;&lt;li&gt;30 request per 1m&lt;/li
        ///     &gt;&lt;li&gt;500 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;li
        ///     &gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102:
        ///     channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists
        ///     &lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205:
        ///     permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301:
        ///     duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is
        ///     error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;
        ///     li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>ResultOfMessagePushResponse</returns>
        ResultOfMessagePushResponse CreateMessage(MessagePushRequest body, string channelToken = null);

        /// <summary>
        ///     push Message to a Channel
        /// </summary>
        /// <remarks>
        ///     &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;1 request per 1s&lt;/li&gt;&lt;li&gt;30 request per 1m&lt;/li
        ///     &gt;&lt;li&gt;500 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;li
        ///     &gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102:
        ///     channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists
        ///     &lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205:
        ///     permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301:
        ///     duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is
        ///     error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;
        ///     li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>ApiResponse of ResultOfMessagePushResponse</returns>
        ApiResponse<ResultOfMessagePushResponse> CreateMessageWithHttpInfo(MessagePushRequest body,
            string channelToken = null);

        /// <summary>
        ///     delete a Channel Message
        /// </summary>
        /// <remarks>
        ///     &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;10 request per 1s&lt;/li&gt;&lt;li&gt;100 request per 1m&lt;/li
        ///     &gt;&lt;li&gt;1000 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;
        ///     li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102:
        ///     channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists
        ///     &lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205:
        ///     permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301:
        ///     duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is
        ///     error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;
        ///     li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">messageId</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Result</returns>
        Result DeleteMessage(long? messageId, string channelToken = null);

        /// <summary>
        ///     delete a Channel Message
        /// </summary>
        /// <remarks>
        ///     &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;10 request per 1s&lt;/li&gt;&lt;li&gt;100 request per 1m&lt;/li
        ///     &gt;&lt;li&gt;1000 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;
        ///     li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102:
        ///     channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists
        ///     &lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205:
        ///     permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301:
        ///     duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is
        ///     error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;
        ///     li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">messageId</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>ApiResponse of Result</returns>
        ApiResponse<Result> DeleteMessageWithHttpInfo(long? messageId, string channelToken = null);

        /// <summary>
        ///     get a Channel Message
        /// </summary>
        /// <remarks>
        ///     &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;10 request per 1s&lt;/li&gt;&lt;li&gt;100 request per 1m&lt;/li
        ///     &gt;&lt;li&gt;1000 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;
        ///     li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102:
        ///     channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists
        ///     &lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205:
        ///     permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301:
        ///     duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is
        ///     error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;
        ///     li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">messageId</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>ResultOfMessageObject</returns>
        ResultOfMessageObject GetMessage(long? messageId, string channelToken = null);

        /// <summary>
        ///     get a Channel Message
        /// </summary>
        /// <remarks>
        ///     &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;10 request per 1s&lt;/li&gt;&lt;li&gt;100 request per 1m&lt;/li
        ///     &gt;&lt;li&gt;1000 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;
        ///     li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102:
        ///     channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists
        ///     &lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205:
        ///     permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301:
        ///     duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is
        ///     error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;
        ///     li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">messageId</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>ApiResponse of ResultOfMessageObject</returns>
        ApiResponse<ResultOfMessageObject> GetMessageWithHttpInfo(long? messageId, string channelToken = null);

        /// <summary>
        ///     get Message List
        /// </summary>
        /// <remarks>
        ///     &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;1 request per 1s&lt;/li&gt;&lt;li&gt;45 request per 1m&lt;/li
        ///     &gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server
        ///     error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102: channel is not exists&lt;/li&gt;&lt;li
        ///     &gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists&lt;/li&gt;&lt;li&gt;105: message is not
        ///     exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205: permission deny&lt;/li&gt;&lt;li&gt;206: too
        ///     many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301: duplicate username/email&lt;/li&gt;&lt;li&gt;
        ///     302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is error&lt;/li&gt;&lt;li&gt;304: client push token
        ///     is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;li&gt;306: your subscription is expired&lt;/li&gt;
        ///     &lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">greater than 1</param>
        /// <param name="pageSize">range is 1,50</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>ResultOfPageResponseOfMessageObject</returns>
        ResultOfPageResponseOfMessageObject GetMessages(int? page, int? pageSize, string channelToken = null);

        /// <summary>
        ///     get Message List
        /// </summary>
        /// <remarks>
        ///     &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;1 request per 1s&lt;/li&gt;&lt;li&gt;45 request per 1m&lt;/li
        ///     &gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server
        ///     error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102: channel is not exists&lt;/li&gt;&lt;li
        ///     &gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists&lt;/li&gt;&lt;li&gt;105: message is not
        ///     exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205: permission deny&lt;/li&gt;&lt;li&gt;206: too
        ///     many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301: duplicate username/email&lt;/li&gt;&lt;li&gt;
        ///     302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is error&lt;/li&gt;&lt;li&gt;304: client push token
        ///     is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;li&gt;306: your subscription is expired&lt;/li&gt;
        ///     &lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">greater than 1</param>
        /// <param name="pageSize">range is 1,50</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>ApiResponse of ResultOfPageResponseOfMessageObject</returns>
        ApiResponse<ResultOfPageResponseOfMessageObject> GetMessagesWithHttpInfo(int? page, int? pageSize,
            string channelToken = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        ///     push Message to a Channel
        /// </summary>
        /// <remarks>
        ///     &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;1 request per 1s&lt;/li&gt;&lt;li&gt;30 request per 1m&lt;/li
        ///     &gt;&lt;li&gt;500 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;li
        ///     &gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102:
        ///     channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists
        ///     &lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205:
        ///     permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301:
        ///     duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is
        ///     error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;
        ///     li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Task of ResultOfMessagePushResponse</returns>
        Task<ResultOfMessagePushResponse> CreateMessageAsync(MessagePushRequest body, string channelToken = null);

        /// <summary>
        ///     push Message to a Channel
        /// </summary>
        /// <remarks>
        ///     &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;1 request per 1s&lt;/li&gt;&lt;li&gt;30 request per 1m&lt;/li
        ///     &gt;&lt;li&gt;500 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;li
        ///     &gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102:
        ///     channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists
        ///     &lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205:
        ///     permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301:
        ///     duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is
        ///     error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;
        ///     li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Task of ApiResponse (ResultOfMessagePushResponse)</returns>
        Task<ApiResponse<ResultOfMessagePushResponse>> CreateMessageAsyncWithHttpInfo(MessagePushRequest body,
            string channelToken = null);

        /// <summary>
        ///     delete a Channel Message
        /// </summary>
        /// <remarks>
        ///     &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;10 request per 1s&lt;/li&gt;&lt;li&gt;100 request per 1m&lt;/li
        ///     &gt;&lt;li&gt;1000 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;
        ///     li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102:
        ///     channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists
        ///     &lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205:
        ///     permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301:
        ///     duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is
        ///     error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;
        ///     li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">messageId</param>
        /// <param name="xChannelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Task of Result</returns>
        Task<Result> DeleteMessageAsync(long? messageId, string xChannelToken = null);

        /// <summary>
        ///     delete a Channel Message
        /// </summary>
        /// <remarks>
        ///     &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;10 request per 1s&lt;/li&gt;&lt;li&gt;100 request per 1m&lt;/li
        ///     &gt;&lt;li&gt;1000 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;
        ///     li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102:
        ///     channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists
        ///     &lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205:
        ///     permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301:
        ///     duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is
        ///     error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;
        ///     li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">messageId</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Task of ApiResponse (Result)</returns>
        Task<ApiResponse<Result>> DeleteMessageAsyncWithHttpInfo(long? messageId, string channelToken = null);

        /// <summary>
        ///     get a Channel Message
        /// </summary>
        /// <remarks>
        ///     &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;10 request per 1s&lt;/li&gt;&lt;li&gt;100 request per 1m&lt;/li
        ///     &gt;&lt;li&gt;1000 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;
        ///     li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102:
        ///     channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists
        ///     &lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205:
        ///     permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301:
        ///     duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is
        ///     error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;
        ///     li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">messageId</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Task of ResultOfMessageObject</returns>
        Task<ResultOfMessageObject> GetMessageAsync(long? messageId, string channelToken = null);

        /// <summary>
        ///     get a Channel Message
        /// </summary>
        /// <remarks>
        ///     &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;10 request per 1s&lt;/li&gt;&lt;li&gt;100 request per 1m&lt;/li
        ///     &gt;&lt;li&gt;1000 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;
        ///     li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102:
        ///     channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists
        ///     &lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205:
        ///     permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301:
        ///     duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is
        ///     error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;
        ///     li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">messageId</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Task of ApiResponse (ResultOfMessageObject)</returns>
        Task<ApiResponse<ResultOfMessageObject>> GetMessageAsyncWithHttpInfo(long? messageId,
            string channelToken = null);

        /// <summary>
        ///     get Message List
        /// </summary>
        /// <remarks>
        ///     &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;1 request per 1s&lt;/li&gt;&lt;li&gt;45 request per 1m&lt;/li
        ///     &gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server
        ///     error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102: channel is not exists&lt;/li&gt;&lt;li
        ///     &gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists&lt;/li&gt;&lt;li&gt;105: message is not
        ///     exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205: permission deny&lt;/li&gt;&lt;li&gt;206: too
        ///     many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301: duplicate username/email&lt;/li&gt;&lt;li&gt;
        ///     302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is error&lt;/li&gt;&lt;li&gt;304: client push token
        ///     is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;li&gt;306: your subscription is expired&lt;/li&gt;
        ///     &lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">greater than 1</param>
        /// <param name="pageSize">range is 1,50</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Task of ResultOfPageResponseOfMessageObject</returns>
        Task<ResultOfPageResponseOfMessageObject>
            GetMessagesAsync(int? page, int? pageSize, string channelToken = null);

        /// <summary>
        ///     get Message List
        /// </summary>
        /// <remarks>
        ///     &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;1 request per 1s&lt;/li&gt;&lt;li&gt;45 request per 1m&lt;/li
        ///     &gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server
        ///     error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102: channel is not exists&lt;/li&gt;&lt;li
        ///     &gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists&lt;/li&gt;&lt;li&gt;105: message is not
        ///     exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205: permission deny&lt;/li&gt;&lt;li&gt;206: too
        ///     many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301: duplicate username/email&lt;/li&gt;&lt;li&gt;
        ///     302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is error&lt;/li&gt;&lt;li&gt;304: client push token
        ///     is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;li&gt;306: your subscription is expired&lt;/li&gt;
        ///     &lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </remarks>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">greater than 1</param>
        /// <param name="pageSize">range is 1,50</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Task of ApiResponse (ResultOfPageResponseOfMessageObject)</returns>
        Task<ApiResponse<ResultOfPageResponseOfMessageObject>> GetMessagesAsyncWithHttpInfo(int? page, int? pageSize,
            string channelToken = null);

        #endregion Asynchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DaDaPushMessageApi : IDaDaPushMessageApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="DaDaPushMessageApi" /> class.
        /// </summary>
        /// <returns></returns>
        public DaDaPushMessageApi(string basePath)
        {
            Configuration = new Configuration {BasePath = basePath};

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DaDaPushMessageApi" /> class
        /// </summary>
        /// <returns></returns>
        public DaDaPushMessageApi()
        {
            Configuration = Configuration.Default;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DaDaPushMessageApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DaDaPushMessageApi(Configuration configuration = null)
        {
            Configuration = configuration ?? Configuration.Default;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");

                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        ///     push Message to a Channel &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;1 request per 1s&lt;/li&gt;&lt;li&gt;
        ///     30 request per 1m&lt;/li&gt;&lt;li&gt;500 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:
        ///     &lt;/h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists
        ///     &lt;/li&gt;&lt;li&gt;102: channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;
        ///     104: channel is not exists&lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;
        ///     /li&gt;&lt;li&gt;205: permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;
        ///     /li&gt;&lt;li&gt;301: duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303:
        ///     user password is error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is
        ///     disabled&lt;/li&gt;&lt;li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel
        ///     &lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>ResultOfMessagePushResponse</returns>
        public ResultOfMessagePushResponse CreateMessage(MessagePushRequest body, string channelToken = null)
        {
            var localVarResponse = CreateMessageWithHttpInfo(body, channelToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     push Message to a Channel &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;1 request per 1s&lt;/li&gt;&lt;li&gt;
        ///     30 request per 1m&lt;/li&gt;&lt;li&gt;500 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:
        ///     &lt;/h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists
        ///     &lt;/li&gt;&lt;li&gt;102: channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;
        ///     104: channel is not exists&lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;
        ///     /li&gt;&lt;li&gt;205: permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;
        ///     /li&gt;&lt;li&gt;301: duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303:
        ///     user password is error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is
        ///     disabled&lt;/li&gt;&lt;li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel
        ///     &lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>ApiResponse of ResultOfMessagePushResponse</returns>
        public ApiResponse<ResultOfMessagePushResponse> CreateMessageWithHttpInfo(MessagePushRequest body,
            string channelToken = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400,
                    "Missing required parameter 'body' when calling DaDaPushMessageApi->CreateMessage");

            const string localVarPath = "/api/v1/message";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelToken != null)
                localVarHeaderParams.Add("x-channel-token",
                    Configuration.ApiClient.ParameterToString(channelToken)); // header parameter
            if (body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory == null)
                return new ApiResponse<ResultOfMessagePushResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (ResultOfMessagePushResponse) Configuration.ApiClient.Deserialize(localVarResponse,
                        typeof(ResultOfMessagePushResponse)));
            var exception = ExceptionFactory("CreateMessage", localVarResponse);
            if (exception != null) throw exception;

            return new ApiResponse<ResultOfMessagePushResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResultOfMessagePushResponse) Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(ResultOfMessagePushResponse)));
        }

        /// <summary>
        ///     push Message to a Channel &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;1 request per 1s&lt;/li&gt;&lt;li&gt;
        ///     30 request per 1m&lt;/li&gt;&lt;li&gt;500 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:
        ///     &lt;/h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists
        ///     &lt;/li&gt;&lt;li&gt;102: channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;
        ///     104: channel is not exists&lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;
        ///     /li&gt;&lt;li&gt;205: permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;
        ///     /li&gt;&lt;li&gt;301: duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303:
        ///     user password is error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is
        ///     disabled&lt;/li&gt;&lt;li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel
        ///     &lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Task of ResultOfMessagePushResponse</returns>
        public async Task<ResultOfMessagePushResponse> CreateMessageAsync(MessagePushRequest body,
            string channelToken = null)
        {
            var localVarResponse = await CreateMessageAsyncWithHttpInfo(body, channelToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     push Message to a Channel &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;1 request per 1s&lt;/li&gt;&lt;li&gt;
        ///     30 request per 1m&lt;/li&gt;&lt;li&gt;500 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:
        ///     &lt;/h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists
        ///     &lt;/li&gt;&lt;li&gt;102: channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;
        ///     104: channel is not exists&lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;
        ///     /li&gt;&lt;li&gt;205: permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;
        ///     /li&gt;&lt;li&gt;301: duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303:
        ///     user password is error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is
        ///     disabled&lt;/li&gt;&lt;li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel
        ///     &lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">body</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Task of ApiResponse (ResultOfMessagePushResponse)</returns>
        public async Task<ApiResponse<ResultOfMessagePushResponse>> CreateMessageAsyncWithHttpInfo(
            MessagePushRequest body, string channelToken = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400,
                    "Missing required parameter 'body' when calling DaDaPushMessageApi->CreateMessage");

            const string localVarPath = "/api/v1/message";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelToken != null)
                localVarHeaderParams.Add("x-channel-token",
                    Configuration.ApiClient.ParameterToString(channelToken)); // header parameter
            if (body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array


            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory == null)
                return new ApiResponse<ResultOfMessagePushResponse>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (ResultOfMessagePushResponse) Configuration.ApiClient.Deserialize(localVarResponse,
                        typeof(ResultOfMessagePushResponse)));
            var exception = ExceptionFactory("CreateMessage", localVarResponse);
            if (exception != null) throw exception;

            return new ApiResponse<ResultOfMessagePushResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResultOfMessagePushResponse) Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(ResultOfMessagePushResponse)));
        }

        /// <summary>
        ///     delete a Channel Message &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;10 request per 1s&lt;/li&gt;&lt;li&gt;
        ///     100 request per 1m&lt;/li&gt;&lt;li&gt;1000 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:
        ///     &lt;/h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists
        ///     &lt;/li&gt;&lt;li&gt;102: channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;
        ///     104: channel is not exists&lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;
        ///     /li&gt;&lt;li&gt;205: permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;
        ///     /li&gt;&lt;li&gt;301: duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303:
        ///     user password is error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is
        ///     disabled&lt;/li&gt;&lt;li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel
        ///     &lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">messageId</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Result</returns>
        public Result DeleteMessage(long? messageId, string channelToken = null)
        {
            var localVarResponse = DeleteMessageWithHttpInfo(messageId, channelToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     delete a Channel Message &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;10 request per 1s&lt;/li&gt;&lt;li&gt;
        ///     100 request per 1m&lt;/li&gt;&lt;li&gt;1000 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:
        ///     &lt;/h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists
        ///     &lt;/li&gt;&lt;li&gt;102: channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;
        ///     104: channel is not exists&lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;
        ///     /li&gt;&lt;li&gt;205: permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;
        ///     /li&gt;&lt;li&gt;301: duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303:
        ///     user password is error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is
        ///     disabled&lt;/li&gt;&lt;li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel
        ///     &lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">messageId</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>ApiResponse of Result</returns>
        public ApiResponse<Result> DeleteMessageWithHttpInfo(long? messageId, string channelToken = null)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400,
                    "Missing required parameter 'messageId' when calling DaDaPushMessageApi->DeleteMessage");

            const string localVarPath = "/api/v1/message/{messageId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPathParams.Add("messageId", Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (channelToken != null)
                localVarHeaderParams.Add("x-channel-token",
                    Configuration.ApiClient.ParameterToString(channelToken)); // header parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory == null)
                return new ApiResponse<Result>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (Result) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Result)));
            var exception = ExceptionFactory("DeleteMessage", localVarResponse);
            if (exception != null) throw exception;

            return new ApiResponse<Result>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Result) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Result)));
        }

        /// <summary>
        ///     delete a Channel Message &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;10 request per 1s&lt;/li&gt;&lt;li&gt;
        ///     100 request per 1m&lt;/li&gt;&lt;li&gt;1000 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:
        ///     &lt;/h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists
        ///     &lt;/li&gt;&lt;li&gt;102: channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;
        ///     104: channel is not exists&lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;
        ///     /li&gt;&lt;li&gt;205: permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;
        ///     /li&gt;&lt;li&gt;301: duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303:
        ///     user password is error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is
        ///     disabled&lt;/li&gt;&lt;li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel
        ///     &lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">messageId</param>
        /// <param name="xChannelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Task of Result</returns>
        public async Task<Result> DeleteMessageAsync(long? messageId, string xChannelToken = null)
        {
            var localVarResponse = await DeleteMessageAsyncWithHttpInfo(messageId, xChannelToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     delete a Channel Message &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;10 request per 1s&lt;/li&gt;&lt;li&gt;
        ///     100 request per 1m&lt;/li&gt;&lt;li&gt;1000 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:
        ///     &lt;/h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists
        ///     &lt;/li&gt;&lt;li&gt;102: channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;
        ///     104: channel is not exists&lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;
        ///     /li&gt;&lt;li&gt;205: permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;
        ///     /li&gt;&lt;li&gt;301: duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303:
        ///     user password is error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is
        ///     disabled&lt;/li&gt;&lt;li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel
        ///     &lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">messageId</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Task of ApiResponse (Result)</returns>
        public async Task<ApiResponse<Result>> DeleteMessageAsyncWithHttpInfo(long? messageId,
            string channelToken = null)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400,
                    "Missing required parameter 'messageId' when calling DaDaPushMessageApi->DeleteMessage");

            const string localVarPath = "/api/v1/message/{messageId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPathParams.Add("messageId", Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (channelToken != null)
                localVarHeaderParams.Add("x-channel-token",
                    Configuration.ApiClient.ParameterToString(channelToken)); // header parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory == null)
                return new ApiResponse<Result>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (Result) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Result)));
            var exception = ExceptionFactory("DeleteMessage", localVarResponse);
            if (exception != null) throw exception;

            return new ApiResponse<Result>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Result) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Result)));
        }

        /// <summary>
        ///     get a Channel Message &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;10 request per 1s&lt;/li&gt;&lt;li&gt;100
        ///     request per 1m&lt;/li&gt;&lt;li&gt;1000 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;
        ///     /h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;
        ///     /li&gt;&lt;li&gt;102: channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104:
        ///     channel is not exists&lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li
        ///     &gt;&lt;li&gt;205: permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li
        ///     &gt;&lt;li&gt;301: duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303:
        ///     user password is error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is
        ///     disabled&lt;/li&gt;&lt;li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel
        ///     &lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">messageId</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>ResultOfMessageObject</returns>
        public ResultOfMessageObject GetMessage(long? messageId, string channelToken = null)
        {
            var localVarResponse = GetMessageWithHttpInfo(messageId, channelToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     get a Channel Message &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;10 request per 1s&lt;/li&gt;&lt;li&gt;100
        ///     request per 1m&lt;/li&gt;&lt;li&gt;1000 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;
        ///     /h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;
        ///     /li&gt;&lt;li&gt;102: channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104:
        ///     channel is not exists&lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li
        ///     &gt;&lt;li&gt;205: permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li
        ///     &gt;&lt;li&gt;301: duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303:
        ///     user password is error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is
        ///     disabled&lt;/li&gt;&lt;li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel
        ///     &lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">messageId</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>ApiResponse of ResultOfMessageObject</returns>
        public ApiResponse<ResultOfMessageObject> GetMessageWithHttpInfo(long? messageId, string channelToken = null)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400,
                    "Missing required parameter 'messageId' when calling DaDaPushMessageApi->GetMessage");

            const string localVarPath = "/api/v1/message/{messageId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPathParams.Add("messageId", Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (channelToken != null)
                localVarHeaderParams.Add("x-channel-token",
                    Configuration.ApiClient.ParameterToString(channelToken)); // header parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory == null)
                return new ApiResponse<ResultOfMessageObject>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (ResultOfMessageObject) Configuration.ApiClient.Deserialize(localVarResponse,
                        typeof(ResultOfMessageObject)));
            var exception = ExceptionFactory("GetMessage", localVarResponse);
            if (exception != null) throw exception;

            return new ApiResponse<ResultOfMessageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResultOfMessageObject) Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(ResultOfMessageObject)));
        }

        /// <summary>
        ///     get a Channel Message &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;10 request per 1s&lt;/li&gt;&lt;li&gt;100
        ///     request per 1m&lt;/li&gt;&lt;li&gt;1000 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;
        ///     /h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;
        ///     /li&gt;&lt;li&gt;102: channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104:
        ///     channel is not exists&lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li
        ///     &gt;&lt;li&gt;205: permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li
        ///     &gt;&lt;li&gt;301: duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303:
        ///     user password is error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is
        ///     disabled&lt;/li&gt;&lt;li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel
        ///     &lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">messageId</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Task of ResultOfMessageObject</returns>
        public async Task<ResultOfMessageObject> GetMessageAsync(long? messageId, string channelToken = null)
        {
            var localVarResponse =
                await GetMessageAsyncWithHttpInfo(messageId, channelToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     get a Channel Message &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;10 request per 1s&lt;/li&gt;&lt;li&gt;100
        ///     request per 1m&lt;/li&gt;&lt;li&gt;1000 request per 1h&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;
        ///     /h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li&gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;
        ///     /li&gt;&lt;li&gt;102: channel is not exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104:
        ///     channel is not exists&lt;/li&gt;&lt;li&gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li
        ///     &gt;&lt;li&gt;205: permission deny&lt;/li&gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li
        ///     &gt;&lt;li&gt;301: duplicate username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303:
        ///     user password is error&lt;/li&gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is
        ///     disabled&lt;/li&gt;&lt;li&gt;306: your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel
        ///     &lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">messageId</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Task of ApiResponse (ResultOfMessageObject)</returns>
        public async Task<ApiResponse<ResultOfMessageObject>> GetMessageAsyncWithHttpInfo(long? messageId,
            string channelToken = null)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400,
                    "Missing required parameter 'messageId' when calling DaDaPushMessageApi->GetMessage");

            const string localVarPath = "/api/v1/message/{messageId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPathParams.Add("messageId", Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (channelToken != null)
                localVarHeaderParams.Add("x-channel-token",
                    Configuration.ApiClient.ParameterToString(channelToken)); // header parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory == null)
                return new ApiResponse<ResultOfMessageObject>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (ResultOfMessageObject) Configuration.ApiClient.Deserialize(localVarResponse,
                        typeof(ResultOfMessageObject)));
            var exception = ExceptionFactory("GetMessage", localVarResponse);
            if (exception != null) throw exception;

            return new ApiResponse<ResultOfMessageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResultOfMessageObject) Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(ResultOfMessageObject)));
        }

        /// <summary>
        ///     get Message List &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;1 request per 1s&lt;/li&gt;&lt;li&gt;45
        ///     request per 1m&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li
        ///     &gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102: channel is not
        ///     exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists&lt;/li&gt;&lt;li
        ///     &gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205: permission deny&lt;/li
        ///     &gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301: duplicate
        ///     username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is error&lt;/li
        ///     &gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;li&gt;306:
        ///     your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">greater than 1</param>
        /// <param name="pageSize">range is 1,50</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>ResultOfPageResponseOfMessageObject</returns>
        public ResultOfPageResponseOfMessageObject GetMessages(int? page, int? pageSize, string channelToken = null)
        {
            var localVarResponse = GetMessagesWithHttpInfo(page, pageSize, channelToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     get Message List &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;1 request per 1s&lt;/li&gt;&lt;li&gt;45
        ///     request per 1m&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li
        ///     &gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102: channel is not
        ///     exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists&lt;/li&gt;&lt;li
        ///     &gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205: permission deny&lt;/li
        ///     &gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301: duplicate
        ///     username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is error&lt;/li
        ///     &gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;li&gt;306:
        ///     your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">greater than 1</param>
        /// <param name="pageSize">range is 1,50</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>ApiResponse of ResultOfPageResponseOfMessageObject</returns>
        public ApiResponse<ResultOfPageResponseOfMessageObject> GetMessagesWithHttpInfo(int? page, int? pageSize,
            string channelToken = null)
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400,
                    "Missing required parameter 'page' when calling DaDaPushMessageApi->GetMessages");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400,
                    "Missing required parameter 'pageSize' when calling DaDaPushMessageApi->GetMessages");

            const string localVarPath = "/api/v1/messages";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (channelToken != null)
                localVarHeaderParams.Add("x-channel-token",
                    Configuration.ApiClient.ParameterToString(channelToken)); // header parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory == null)
                return new ApiResponse<ResultOfPageResponseOfMessageObject>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (ResultOfPageResponseOfMessageObject) Configuration.ApiClient.Deserialize(localVarResponse,
                        typeof(ResultOfPageResponseOfMessageObject)));
            var exception = ExceptionFactory("GetMessages", localVarResponse);
            if (exception != null) throw exception;

            return new ApiResponse<ResultOfPageResponseOfMessageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResultOfPageResponseOfMessageObject) Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(ResultOfPageResponseOfMessageObject)));
        }

        /// <summary>
        ///     get Message List &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;1 request per 1s&lt;/li&gt;&lt;li&gt;45
        ///     request per 1m&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li
        ///     &gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102: channel is not
        ///     exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists&lt;/li&gt;&lt;li
        ///     &gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205: permission deny&lt;/li
        ///     &gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301: duplicate
        ///     username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is error&lt;/li
        ///     &gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;li&gt;306:
        ///     your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">greater than 1</param>
        /// <param name="pageSize">range is 1,50</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Task of ResultOfPageResponseOfMessageObject</returns>
        public async Task<ResultOfPageResponseOfMessageObject> GetMessagesAsync(int? page, int? pageSize,
            string channelToken = null)
        {
            var localVarResponse = await GetMessagesAsyncWithHttpInfo(page, pageSize, channelToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     get Message List &lt;h2&gt;Rate Limit:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;1 request per 1s&lt;/li&gt;&lt;li&gt;45
        ///     request per 1m&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Result code/errmsg List:&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;0: ok&lt;/li
        ///     &gt;&lt;li&gt;1: server error&lt;/li&gt;&lt;li&gt;101: channel is exists&lt;/li&gt;&lt;li&gt;102: channel is not
        ///     exists&lt;/li&gt;&lt;li&gt;103: channel token error&lt;/li&gt;&lt;li&gt;104: channel is not exists&lt;/li&gt;&lt;li
        ///     &gt;105: message is not exists&lt;/li&gt;&lt;li&gt;204: bad request&lt;/li&gt;&lt;li&gt;205: permission deny&lt;/li
        ///     &gt;&lt;li&gt;206: too many request, please after 5 minutes to try!&lt;/li&gt;&lt;li&gt;301: duplicate
        ///     username/email&lt;/li&gt;&lt;li&gt;302: user is not exists&lt;/li&gt;&lt;li&gt;303: user password is error&lt;/li
        ///     &gt;&lt;li&gt;304: client push token is error&lt;/li&gt;&lt;li&gt;305: user is disabled&lt;/li&gt;&lt;li&gt;306:
        ///     your subscription is expired&lt;/li&gt;&lt;li&gt;307: user not subscribe channel&lt;/li&gt;&lt;/ul&gt;
        /// </summary>
        /// <exception cref="Com.DaDaPush.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">greater than 1</param>
        /// <param name="pageSize">range is 1,50</param>
        /// <param name="channelToken">see: https://www.dadapush.com/channel/list </param>
        /// <returns>Task of ApiResponse (ResultOfPageResponseOfMessageObject)</returns>
        public async Task<ApiResponse<ResultOfPageResponseOfMessageObject>> GetMessagesAsyncWithHttpInfo(int? page,
            int? pageSize, string channelToken = null)
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400,
                    "Missing required parameter 'page' when calling DaDaPushMessageApi->GetMessages");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400,
                    "Missing required parameter 'pageSize' when calling DaDaPushMessageApi->GetMessages");

            const string localVarPath = "/api/v1/messages";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (channelToken != null)
                localVarHeaderParams.Add("x-channel-token",
                    Configuration.ApiClient.ParameterToString(channelToken)); // header parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory == null)
                return new ApiResponse<ResultOfPageResponseOfMessageObject>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                    (ResultOfPageResponseOfMessageObject) Configuration.ApiClient.Deserialize(localVarResponse,
                        typeof(ResultOfPageResponseOfMessageObject)));
            var exception = ExceptionFactory("GetMessages", localVarResponse);
            if (exception != null) throw exception;

            return new ApiResponse<ResultOfPageResponseOfMessageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResultOfPageResponseOfMessageObject) Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(ResultOfPageResponseOfMessageObject)));
        }

        /// <summary>
        ///     Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete(
            "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        ///     Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        ///     Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }
    }
}