/* 
 * DaDaPush Public API
 *
 * DaDaPush: Real-time Notifications App Send real-time notifications through our API without coding and maintaining your own app for iOS or Android devices.
 *
 * The version of the OpenAPI document: v1
 * Contact: contacts@dadapush.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Com.DaDaPush.Client.Model
{
    /// <summary>
    ///     PageResponseOfMessageObject
    /// </summary>
    [DataContract]
    public class PageResponseOfMessageObject : IEquatable<PageResponseOfMessageObject>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="PageResponseOfMessageObject" /> class.
        /// </summary>
        /// <param name="content">content.</param>
        /// <param name="totalElements">totalElements.</param>
        /// <param name="totalPages">totalPages.</param>
        public PageResponseOfMessageObject(List<MessageObject> content = default(List<MessageObject>),
            long? totalElements = default(long?), long? totalPages = default(long?))
        {
            Content = content;
            TotalElements = totalElements;
            TotalPages = totalPages;
        }

        /// <summary>
        ///     Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public List<MessageObject> Content { get; set; }

        /// <summary>
        ///     Gets or Sets TotalElements
        /// </summary>
        [DataMember(Name = "totalElements", EmitDefaultValue = false)]
        public long? TotalElements { get; set; }

        /// <summary>
        ///     Gets or Sets TotalPages
        /// </summary>
        [DataMember(Name = "totalPages", EmitDefaultValue = false)]
        public long? TotalPages { get; set; }

        /// <summary>
        ///     Returns true if PageResponseOfMessageObject instances are equal
        /// </summary>
        /// <param name="input">Instance of PageResponseOfMessageObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PageResponseOfMessageObject input)
        {
            if (input == null)
                return false;

            return
                (
                    Content == input.Content ||
                    Content != null &&
                    input.Content != null &&
                    Content.SequenceEqual(input.Content)
                ) &&
                (
                    TotalElements == input.TotalElements ||
                    TotalElements != null &&
                    TotalElements.Equals(input.TotalElements)
                ) &&
                (
                    TotalPages == input.TotalPages ||
                    TotalPages != null &&
                    TotalPages.Equals(input.TotalPages)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PageResponseOfMessageObject {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  TotalElements: ").Append(TotalElements).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as PageResponseOfMessageObject);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Content != null)
                    hashCode = hashCode * 59 + Content.GetHashCode();
                if (TotalElements != null)
                    hashCode = hashCode * 59 + TotalElements.GetHashCode();
                if (TotalPages != null)
                    hashCode = hashCode * 59 + TotalPages.GetHashCode();
                return hashCode;
            }
        }
    }
}