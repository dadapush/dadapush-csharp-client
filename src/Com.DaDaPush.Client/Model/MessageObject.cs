/* 
 * DaDaPush Public API
 *
 * DaDaPush: Real-time Notifications App Send real-time notifications through our API without coding and maintaining your own app for iOS or Android devices.
 *
 * The version of the OpenAPI document: v1
 * Contact: contacts@dadapush.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Com.DaDaPush.Client.Model
{
    /// <summary>
    ///     MessageObject
    /// </summary>
    [DataContract]
    public class MessageObject : IEquatable<MessageObject>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="MessageObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageObject()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="MessageObject" /> class.
        /// </summary>
        /// <param name="actions">action size range is 0,3.</param>
        /// <param name="channelName">channelName (required).</param>
        /// <param name="content">content (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="title">title (required).</param>
        public MessageObject(List<Action> actions = default(List<Action>), string channelName = default(string),
            string content = default(string), string createdAt = default(string), long? id = default(long?),
            string title = default(string))
        {
            // to ensure "channelName" is required (not null)
            ChannelName = channelName ?? throw new InvalidDataException(
                              "channelName is a required property for MessageObject and cannot be null");

            // to ensure "content" is required (not null)
            Content = content ?? throw new InvalidDataException(
                          "content is a required property for MessageObject and cannot be null");

            // to ensure "createdAt" is required (not null)
            CreatedAt = createdAt ??
                        throw new InvalidDataException(
                            "createdAt is a required property for MessageObject and cannot be null");

            // to ensure "id" is required (not null)
            if (id == null)
                throw new InvalidDataException("id is a required property for MessageObject and cannot be null");
            Id = id;

            // to ensure "title" is required (not null)
            Title = title ?? throw new InvalidDataException(
                        "title is a required property for MessageObject and cannot be null");

            Actions = actions;
        }

        /// <summary>
        ///     action size range is 0,3
        /// </summary>
        /// <value>action size range is 0,3</value>
        [DataMember(Name = "actions", EmitDefaultValue = false)]
        public List<Action> Actions { get; set; }

        /// <summary>
        ///     Gets or Sets ChannelName
        /// </summary>
        [DataMember(Name = "channelName", EmitDefaultValue = false)]
        public string ChannelName { get; set; }

        /// <summary>
        ///     Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        ///     Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        ///     Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long? Id { get; set; }

        /// <summary>
        ///     Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        ///     Returns true if MessageObject instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageObject input)
        {
            if (input == null)
                return false;

            return
                (
                    Actions == input.Actions ||
                    Actions != null &&
                    input.Actions != null &&
                    Actions.SequenceEqual(input.Actions)
                ) &&
                (
                    ChannelName == input.ChannelName ||
                    ChannelName != null &&
                    ChannelName.Equals(input.ChannelName)
                ) &&
                (
                    Content == input.Content ||
                    Content != null &&
                    Content.Equals(input.Content)
                ) &&
                (
                    CreatedAt == input.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(input.CreatedAt)
                ) &&
                (
                    Id == input.Id ||
                    Id != null &&
                    Id.Equals(input.Id)
                ) &&
                (
                    Title == input.Title ||
                    Title != null &&
                    Title.Equals(input.Title)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageObject {\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  ChannelName: ").Append(ChannelName).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as MessageObject);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Actions != null)
                    hashCode = hashCode * 59 + Actions.GetHashCode();
                if (ChannelName != null)
                    hashCode = hashCode * 59 + ChannelName.GetHashCode();
                if (Content != null)
                    hashCode = hashCode * 59 + Content.GetHashCode();
                if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                return hashCode;
            }
        }
    }
}